{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "{\"createdOn\":\"Windows\",\"createdBy\":\"Amplify\",\"createdWith\":\"11.0.2\",\"stackType\":\"function-Lambda\",\"metadata\":{}}",
  "Parameters": {
    "CloudWatchRule": {
      "Type": "String",
      "Default": "NONE",
      "Description": " Schedule Expression"
    },
    "deploymentBucketName": {
      "Type": "String"
    },
    "env": {
      "Type": "String"
    },
    "s3Key": {
      "Type": "String"
    },
    "customcloudfrontCloudFrontDistributionId": {
      "Type": "String"
    },
    "apipizzaappGraphQLAPIIdOutput": {
      "Type": "String"
    },
    "apipizzaappGraphQLAPIEndpointOutput": {
      "Type": "String"
    }
  },
  "Conditions": {
    "ShouldNotCreateEnvResources": {
      "Fn::Equals": [
        {
          "Ref": "env"
        },
        "NONE"
      ]
    }
  },
  "Resources": {
    "LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Metadata": {
        "aws:asset:path": "./src",
        "aws:asset:property": "Code"
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "deploymentBucketName"
          },
          "S3Key": {
            "Ref": "s3Key"
          }
        },
        "Handler": "index.handler",
        "FunctionName": {
          "Fn::If": [
            "ShouldNotCreateEnvResources",
            "InvalidateCloudfrontUrls",
            {
              "Fn::Join": [
                "",
                [
                  "InvalidateCloudfrontUrls",
                  "-",
                  {
                    "Ref": "env"
                  }
                ]
              ]
            }
          ]
        },
        "Environment": {
          "Variables": {
            "ENV": {
              "Ref": "env"
            },
            "REGION": {
              "Ref": "AWS::Region"
            },
            "DISTRIBUTION_ID": {
              "Ref": "customcloudfrontCloudFrontDistributionId"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Runtime": "nodejs16.x",
        "Layers": [],
        "Timeout": 25
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::If": [
            "ShouldNotCreateEnvResources",
            "pizzaappLambdaRolee82cc19d",
            {
              "Fn::Join": [
                "",
                [
                  "pizzaappLambdaRolee82cc19d",
                  "-",
                  {
                    "Ref": "env"
                  }
                ]
              ]
            }
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "lambdaexecutionpolicy": {
      "DependsOn": [
        "LambdaExecutionRole"
      ],
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "lambda-execution-policy",
        "Roles": [
          {
            "Ref": "LambdaExecutionRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*",
                  {
                    "region": {
                      "Ref": "AWS::Region"
                    },
                    "account": {
                      "Ref": "AWS::AccountId"
                    },
                    "lambda": {
                      "Ref": "LambdaFunction"
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    "InvalidateCloudfrontUrlsDataSource": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Ref": "apipizzaappGraphQLAPIIdOutput"
        },
        "Name": "InvalidateCloudfrontUrlsDataSource",
        "Type": "AWS_LAMBDA",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "LambdaConfig": {
          "LambdaFunctionArn": {
            "Fn::GetAtt": [
              "LambdaFunction",
              "Arn"
            ]
          }
        }
      },
      "DependsOn": [
        "LambdaExecutionRole"
      ]
    },
    "InvalidateCloudfrontUrlsResolver": {
      "Type": "AWS::AppSync::Resolver",
      "Properties": {
        "ApiId": {
          "Ref": "apipizzaappGraphQLAPIIdOutput"
        },
        "TypeName": "Mutation",
        "FieldName": "invalidateCloudfrontUrl",
        "Kind": "PIPELINE",
        "PipelineConfig": {
          "Functions": [
            {
              "Fn::GetAtt": [
                "InvalidateCloudfrontUrlsFunction",
                "FunctionId"
              ]
            }
          ]
        },
        "RequestMappingTemplate": "## [Start] Determine request authentication mode **\r\n#if( $util.isNullOrEmpty($authMode) && !$util.isNull($ctx.identity) && !$util.isNull($ctx.identity.sub) && !$util.isNull($ctx.identity.issuer) && !$util.isNull($ctx.identity.username) && !$util.isNull($ctx.identity.claims) && !$util.isNull($ctx.identity.sourceIp) && !$util.isNull($ctx.identity.defaultAuthStrategy) )\r\n  #set( $authMode = \"userPools\" )\r\n#end\r\n## [Start] Check authMode and execute owner/group checks **\r\n#if( $authMode == \"userPools\" )\r\n  ## [Start] Static Group Authorization Checks **\r\n  #set($isStaticGroupAuthorized = $util.defaultIfNull(\r\n            $isStaticGroupAuthorized, false))\r\n  \r\n  #set( $userGroups = $util.defaultIfNull($ctx.identity.claims.get(\"cognito:groups\"), []) )\r\n  #set( $allowedGroups = [\"Admin\", \"Management\", \"Employee\"] )\r\n  #foreach( $userGroup in $userGroups )\r\n    #if( $allowedGroups.contains($userGroup) )\r\n      #set( $isStaticGroupAuthorized = true )\r\n      #break\r\n    #end\r\n  #end\r\n\r\n  ## [Start] Throw if unauthorized **\r\n  #if( !($isStaticGroupAuthorized == true || $isOwnerAuthorized == true) )\r\n    $util.unauthorized()\r\n  #end\r\n#end\r\n## [End] Check authMode and execute owner/group checks **\r\n{}",
        "ResponseMappingTemplate": "#if($ctx.error)\r\n    $utils.appendError($ctx.error.message, $ctx.error.message)\r\n#end\r\n$util.toJson($ctx.result)"
      }
    },
    "InvalidateCloudfrontUrlsFunction": {
      "Type": "AWS::AppSync::FunctionConfiguration",
      "Properties": {
        "ApiId": {
          "Ref": "apipizzaappGraphQLAPIIdOutput"
        },
        "DataSourceName": "InvalidateCloudfrontUrlsDataSource",
        "Name": "Mutation_Invalidate_Cloudfront_Urls_Function",
        "Description": "invalidate a list of cloudfront urls",
        "FunctionVersion": "2018-05-29",
        "RequestMappingTemplate": "{\r\n\t\"version\": \"2017-02-28\",\r\n    \"operation\": \"Invoke\",\r\n    \"payload\": {\r\n    \t\"arguments\":  $util.toJson($ctx.args.input)\r\n    }\r\n}",
        "ResponseMappingTemplate": "#if($ctx.error)\r\n    $utils.appendError($ctx.error.message, $ctx.error.message)\r\n#end\r\n\r\n#if ($ctx.result.statusCode == 200)\r\n  $util.toJson($ctx.result.body)\r\n#else\r\n  $util.error($ctx.result.body, $ctx.result.body)\r\n#end"
      },
      "DependsOn": [
        "InvalidateCloudfrontUrlsDataSource"
      ]
    },
    "CloudFrontInvalidationPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CloudFrontInvalidationPolicy",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": "cloudfront:CreateInvalidation",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:cloudfront::",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":distribution/",
                    {
                      "Ref": "customcloudfrontCloudFrontDistributionId"
                    }
                  ]
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "LambdaExecutionRole"
          }
        ]
      }
    }
  },
  "Outputs": {
    "Name": {
      "Value": {
        "Ref": "LambdaFunction"
      }
    },
    "Arn": {
      "Value": {
        "Fn::GetAtt": [
          "LambdaFunction",
          "Arn"
        ]
      }
    },
    "Region": {
      "Value": {
        "Ref": "AWS::Region"
      }
    },
    "LambdaExecutionRole": {
      "Value": {
        "Ref": "LambdaExecutionRole"
      }
    },
    "LambdaExecutionRoleArn": {
      "Value": {
        "Fn::GetAtt": [
          "LambdaExecutionRole",
          "Arn"
        ]
      }
    }
  }
}