input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
}

type PizzaApp
  @model(
    queries: null
    mutations: null
    subscriptions: null
    timestamps: null
  ) {
  PK: String! @primaryKey(sortKeyFields: ["SK"])
  SK: String!
  GSI_SECONDARY_PK: String!
    @index(name: "GSI_SECONDARY_PK", sortKeyFields: ["GSI_SECONDARY_SK"])
  GSI_SECONDARY_SK: String!
  GSI_TERTIARY_PK: String!
    @index(name: "GSI_TERTIARY_PK", sortKeyFields: ["GSI_TERTIARY_SK"])
  GSI_TERTIARY_SK: String!
  CREATED_AT: String!
  UPDATED_AT: String!
  MODEL: String!
  TTL: AWSTimestamp
}

### TYPES ###
type Employee {
  id: String!
  first_name: String!
  last_name: String!
  email: String!
  street: String!
  city: String!
  state: String!
  zip: Int!
  phone: String!
  date_of_birth: String!
  date_hired: String!
  user_role: UserRole!
  annual_salary: Float!
  employee_url: String!
}

type Location {
  id: String!
  name: String!
  address: String!
  city: String!
  state: String!
  zip: Int!
  location_url: String!
}

type EmployeeLocationListData {
  employee_id: String!
  location_id: String!
  name: String!
  location_url: String!
  employee_url: String!
  city: String!
  state: String!
}

type Order {
  id: String!
  user_id: String!
  date: String!
  customPizzas: [CustomPizza]!
  specialtyPizzas: [SpecialtyPizza]!
  user_name: String!
  subtotal: Float!
  tax: Float!
  total: Float!
}

type CustomPizza {
  size: PizzaSize!
  crust: PizzaCrust!
  sauce: PizzaSauce!
  cheese: PizzaCheese!
  meats: [PizzaMeat]!
  veggies: [PizzaVeggie]!
  price: Float!
  quantity: Int!
}

type SpecialtyPizza {
  description: String!
  id: String!
  imageUrl: String!
  name: String
  price: Float!
  toppings: [String]!
}

type PizzaCheese {
  quantity: CheeseQuantity!
  additional: AdditionCheeseType
}

### Response Types ###
type ListOrdersByUserResponse {
  items: [Order]
  nextToken: String
}

type ListEmployeesResponse {
  items: [Employee]
  nextToken: String
}

type ListLocationsResponse {
  items: [Location]
  nextToken: String
}

type ListLocationEmployeesResponse {
  items: [EmployeeLocationListData]
  nextToken: String
}

type ListEmployeeLocationsResponse {
  items: [EmployeeLocationListData]
  nextToken: String
}

### ENUMS ###
enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum PizzaVeggie {
  MUSHROOMS
  ONIONS
  GREEN_PEPPERS
  BLACK_OLIVES
  TOMATOES
  PINEAPPLE
  JALAPENOS
  NONE
}

enum PizzaMeat {
  PEPPERONI
  SAUSAGE
  BEEF
  HAM
  BACON
  CHICKEN
  NONE
}

enum AdditionCheeseType {
  THREE_CHEESE
  EXTRA_CHEESE
  PARMESAN
  FETA
  CHEDDAR
  NONE
}

enum CheeseQuantity {
  NORMAL
  LIGHT
  NONE
}

enum PizzaSize {
  SMALL
  MEDIUM
  LARGE
}

enum PizzaCrust {
  ORIGINAL
  DEEP_DISH
  THIN
  STUFFED
  NEW_YORK
}

enum PizzaSauce {
  TOMATO
  ALFREDO
  PESTO
  BBQ
  GARLIC
  NONE
}

### INPUTS ###

### Query Inputs ###
input ListOrdersByUserInput {
  user_id: String!
  reverse_dir: Boolean!
  limit: Int
  nextToken: String
}

input GetOrderInput {
  id: String!
  user_id: String!
  date: String!
}

input GetEmployeeInput {
  id: String!
}

input ListEmployeesInput {
  reverse_dir: Boolean!
  limit: Int
  nextToken: String
}

input GetLocationInput {
  id: String!
}

input ListLocationsInput {
  reverse_dir: Boolean!
  limit: Int
  nextToken: String
}

input ListLocationEmployeesInput {
  location_id: String!
  reverse_dir: Boolean!
  limit: Int
  nextToken: String
}

input ListEmplyeeLocationsInput {
  employee_id: String!
  reverse_dir: Boolean!
  limit: Int
  nextToken: String
}

### Mutation Inputs ###
input CreateEmployeeInput {
  id: String!
  first_name: String!
  last_name: String!
  email: String!
  street: String!
  city: String!
  state: String!
  zip: Int!
  phone: String!
  date_of_birth: String!
  date_hired: String!
  user_role: UserRole!
  annual_salary: Float!
  employee_url: String!
}

input UpdateEmployeeInput {
  id: String!
  first_name: String!
  last_name: String!
  email: String!
  street: String!
  city: String!
  state: String!
  zip: Int!
  phone: String!
  date_of_birth: String!
  date_hired: String!
  user_role: UserRole!
  annual_salary: Float!
  employee_url: String!
}

input DeleteEmployeeInput {
  id: String!
}

input CreateLocationInput {
  id: String!
  name: String!
  address: String!
  city: String!
  state: String!
  zip: Int!
}

input DeleteLocationInput {
  id: String!
}

input AddEmployeeToLocationInput {
  employee_id: String!
  location_id: String!
}

input DeleteEmployeeFromLocationInput {
  employee_id: String!
  location_id: String!
}

input CreateOrderInput {
  user_id: String!
  date: String!
  user_name: String!
  subtotal: Float!
  tax: Float!
  total: Float!
  customPizzas: [CustomPizzaInput]
  specialtyPizzas: [SpecialtyPizzaInput]
}

input UpdateOrderInput {
  id: String!
  user_id: String!
  date: String!
  user_name: String
  subtotal: Float
  tax: Float
  total: Float
  customPizzas: [CustomPizzaInput]
  specialtyPizzas: [SpecialtyPizzaInput]
}

input CustomPizzaInput {
  size: PizzaSize!
  crust: PizzaCrust!
  sauce: PizzaSauce!
  cheese: PizzaCheeseInput!
  meats: [PizzaMeat]!
  veggies: [PizzaVeggie]!
  price: Float!
  quantity: Int!
}

input SpecialtyPizzaInput {
  description: String!
  id: String!
  imageUrl: String!
  name: String
  price: Float!
  toppings: [String]!
}

input PizzaCheeseInput {
  quantity: CheeseQuantity!
  additional: AdditionCheeseType
}

input DeleteOrderInput {
  id: String!
  user_id: String!
  date: String!
}

### Queries ###
type Query {
  listOrdersByUser(input: ListOrdersByUserInput!): ListOrdersByUserResponse
  getOrder(input: GetOrderInput!): Order
  getEmployee(input: GetEmployeeInput!): Employee
  listEmployees(input: ListEmployeesInput!): ListEmployeesResponse
  getLocation(input: GetLocationInput!): Location
  listLocations(input: ListLocationsInput!): ListLocationsResponse
  listLocationEmployees(
    input: ListLocationEmployeesInput!
  ): ListLocationEmployeesResponse
  listEmployeeLocations(
    input: ListEmplyeeLocationsInput!
  ): ListEmployeeLocationsResponse
}

### Mutations ###
type Mutation {
  createOrder(input: CreateOrderInput!): Order
  updateOrder(input: UpdateOrderInput!): Order
  deleteOrder(input: DeleteOrderInput!): Order
  createEmployee(input: CreateEmployeeInput!): Employee
  updateEmployee(input: UpdateEmployeeInput!): Employee
  deleteEmployee(input: DeleteEmployeeInput!): Employee
  createLocation(input: CreateLocationInput!): Location
  deleteLocation(input: DeleteLocationInput!): Location
  addEmployeeToLocation(
    input: AddEmployeeToLocationInput!
  ): EmployeeLocationListData
  deleteEmployeeFromLocation(
    input: DeleteEmployeeFromLocationInput!
  ): EmployeeLocationListData
}
